<?php

namespace Sesser\Scurl;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-02 at 21:02:22.
 * @ignore
 */
class ScurlTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Scurl
	 */
	protected $scurl;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->scurl = new Scurl();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}
	
	/**
	 * @covers Sesser\Scurl\Request::__construct
	 * @covers Sesser\Scurl\Request::initialize
	 */
	public function testInstanceAndInit()
	{
		$this->assertInstanceOf('\Sesser\Scurl\Scurl', $this->scurl);
	}

	/**
	 * @covers Sesser\Scurl\Scurl::get
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::send
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testGet()
	{
		$res = $this->scurl->get('http://httptest.instaphp.com/test/get', '_method='.__FUNCTION__.'&test=get');
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_get_parameters']['_method']);
		$this->assertEquals(Request::METHOD_GET, $json['request_method']);
		
		$res = $this->scurl->get('http://httptest.instaphp.com/test/get', ['_method' => __FUNCTION__, 'test' => 'get']);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_get_parameters']['_method']);
		$this->assertEquals(Request::METHOD_GET, $json['request_method']);
	}

	/**
	 * @covers Sesser\Scurl\Scurl::post
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::send
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testPost()
	{
		$res = $this->scurl->post('http://httptest.instaphp.com/test/post', '_method='.__FUNCTION__.'&test=post');
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_post_parameters']['_method']);
		$this->assertEquals(Request::METHOD_POST, $json['request_method']);
		$res = $this->scurl->post('http://httptest.instaphp.com/test/post', ['_method' => __FUNCTION__, 'test' => 'post']);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_post_parameters']['_method']);
		$this->assertEquals(Request::METHOD_POST, $json['request_method']);
		
	}

	/**
	 * @covers Sesser\Scurl\Scurl::put
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::send
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testPut()
	{
		
		$res = $this->scurl->put('http://httptest.instaphp.com/test/put/' . basename(TEST_PUTFILE), '', ['data' => TEST_PUTFILE]);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$res = $this->scurl->put('http://httptest.instaphp.com/test/put', ['_method' => __FUNCTION__], ['data' => '_method=' . __FUNCTION__ . '&test=put']);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_put_parameters']['_method']);
		$this->assertEquals(Request::METHOD_PUT, $json['request_method']);
		
	}

	/**
	 * @covers Sesser\Scurl\Scurl::delete
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::send
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testDelete()
	{
		$res = $this->scurl->delete('http://httptest.instaphp.com/test/delete/' . basename(TEST_PUTFILE), ['_method' => __FUNCTION__, 'test' => 'delete']);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_get_parameters']['_method']);
		$this->assertEquals(Request::METHOD_DELETE, $json['request_method']);
		
	}

	/**
	 * @covers Sesser\Scurl\Scurl::head
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::send
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testHead()
	{
		$res = $this->scurl->head('http://httptest.instaphp.com/test/head', ['_method' => __FUNCTION__, 'test' => 'head']);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertEmpty($res->body);
		$this->assertNotEmpty($res->headers);
		$this->assertEquals(__FUNCTION__, $res->headers['HTTPTEST__method']);
		$this->assertEquals(Request::METHOD_HEAD, $res->headers['HTTPTEST_METHOD']);
	}

	/**
	 * @covers Sesser\Scurl\Scurl::request
	 * @covers Sesser\Scurl\Request::setCurlOption
	 * @covers Sesser\Scurl\Response::__construct
	 */
	public function testRequest()
	{
		$res = $this->scurl->request('http://httptest.instaphp.com/test/get', ['_method' => __FUNCTION__, 'test' => 'get'], ['options' => ['user-agent' => 'ScurlTest/1.0']], Request::METHOD_GET);
		$this->assertInstanceOf('\Sesser\Scurl\Response', $res);
		$this->assertNotEmpty($res->body);
		$json = json_decode($res->body, TRUE);
		$this->assertEquals(__FUNCTION__, $json['request_get_parameters']['_method']);
		$this->assertEquals(Request::METHOD_GET, $json['request_method']);
		
	}

}
